# 백준 14438번 수열과 쿼리 17 : https://www.acmicpc.net/problem/14438

import math
import sys
input = sys.stdin.readline
sys.setrecursionlimit(100000)

n = int(input())
logn = (1 << (math.ceil(math.log2(n)) + 1)) + 1
arr = [0] + list(map(int, input().split()))
tree = [0] * logn

def seg(st, ed, node):
    if st == ed:
        tree[node] = arr[st]
        return tree[node]
    mid = (st + ed) // 2
    tree[node] = min(seg(st, mid, node << 1), seg(mid + 1, ed, (node << 1) + 1))
    return tree[node]

def query(st, ed, node, left, right):  #left ~ right 사이의 최소값
    if left <= st and ed <= right: return tree[node]
    if st > right or ed < left: return 1e12
    mid = (st + ed) // 2
    return min(query(st, mid, node << 1, left, right), query(mid + 1, ed, (node << 1) + 1, left, right))

def update(st, ed, node, id, val):
    if st > id or ed < id: return tree[node]
    if st == ed:
        tree[node] = val
        return val
    mid = (st + ed) // 2
    tree[node] = min(update(st, mid, node << 1, id, val), update(mid + 1, ed, (node << 1) + 1, id, val))
    return tree[node]

seg(1, n, 1)
for _ in range(int(input())):
    cmd, a, b = map(int, input().split())
    if cmd == 1:
        update(1, n, 1, a, b)
    else:
        print(query(1, n, 1, a, b))


# 알고리즘 : 세그먼트 트리
'''
풀이 : 세그먼트 트리를 통해 최소값 계산 및 값 업데이트를 수행한다.
일반적인 세그먼트 트리 문제다.
입력된 배열 값을 seg 함수를 통해 세그먼트 트리에 적용시킨다.
이후, cmd 값에 따라 update 함수나 query 함수를 수행한다.

update 함수는 트리의 가장 및 깊이까지 내려가서 값을 수정하고 다시 루트노드로 돌아온다.
돌아오면서 최소값이 갱신되는 경우 갱신하면서 올라온다.

query 함수는 루트노드가 포함하는 범위와 입력으로 주어진 탐색 범위를 비교한다.
탐색 범위에 트리에서 현재 노드가 포함하는 범위가 속한다면, 해당 노드의 값을 반환한다.
그렇지 않다면, 자식 노드로 내려가 위 탐색을 한 번 더 수행한다.
이를 탐색 범위에 맞아질 때까지 반복한다.

예를 들어 수가 5개고 1번~4번 인덱스 사이의 최소값을 구한다고 생각하면 다음과 같다.
seg 트리의 루트노드(1번 인덱스)는 1번부터 5번 사이의 최소값을 가지고 있다.
그러나 탐색범위가 1번~4번 이므로 자식 노드로 이동한다.
자식 노드는 각각 (1번~3번의 최소값)과 (4번~5번의 최소값)을 가지고 있다.
왼쪽 자식은 탐색 범위가 현재 노드의 범위를 포함하기 때문에 그값을 그대로 반환한다.
오른쪽 자식은 4번만 필요하기 때문에 한 번 더 자식으로 내려가 4번 인덱스의 값을 반환한다.
왼쪽 자식과 오른쪽 자식이 가져온 두 값을 비교해 더 작은 값이 1번~4번 인덱스의 최소값이 된다.
'''
